// automatically generated by Xtext
grammar org.xtext.example.domij.ErDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/er" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore 
 
ERModel returns ERModel:
	{ERModel} 
	'ERModel'
	name=EString
	'{'
		  'entities' '{' entities+=Entity ( "," entities+=Entity)* '}' 
		  ('gerunds' '{' gerunds+=Gerund ( "," gerunds+=Gerund)* '}' )?
		  'relationships' '{' relationships+=RelationshipConcept ( "," relationships+=RelationshipConcept)* '}' 
		  ('domains' '{' domains+=Domain ( "," domains+=Domain)* '}' )?
	'}'; 

 

RelationshipConcept returns RelationshipConcept:
	Relationship | ISA | Categorisation | IdentificationDependency;



 




EntityConcept returns EntityConcept: 
	Entity | Gerund;


EString returns ecore::EString:
	STRING | ID; 
 
Entity returns Entity:
	'Entity'
	name=EString
	'{'
		('attributeSet' '{' entityAttributes+=Attribute ( "," entityAttributes+=Attribute)* '}' )?
		('keySet' '{' keySet+=Key ( "," keySet+=Key)* '}' )?
		('primaryKey' primaryKey=[Key | EString])?
	'}';

Gerund returns Gerund:
	'Gerund'
	//name=EString
	//'{'
		 relationship=Relationship
	/*'}'*/;

Attribute returns Attribute:
	{Attribute}
	//'Attribute'
	name=EString
	//'{'
		//attributeDomain=AttributeDomain
	/*'}'*/;
	
AttributeDomain returns AttributeDomain:
	//'AttributeDomain'
	//'{'
		'domain' domain=[Domain|EString]
		('(' length=EInt ')')?
		('default' default=EString)?
	/*'}'*/;
 
Key returns Key:
	//'Key'
	name=EString
	//'{'
		/*'keyAttributes' */'(' keyAttributes+=[Attribute|EString] ( "," keyAttributes+=[Attribute|EString])* ')' 
	/*'}'*/;

Domain returns Domain:
	{Domain} 
	//'Domain'
	name=EString;

Relationship returns Relationship:
	'Relationship'
	name=EString
	'{' 
		'entities' '{' entities+=RegularEntity ( "," entities+=RegularEntity)* '}'
		('attributeSet' '{' relationshipAttributes+=Attribute ( "," relationshipAttributes+=Attribute)* '}' )? 
	'}';

ISA returns ISA:
	'ISA'
	name=EString
	'{'
		'supertype' supertype=RegularEntity
		'subtypes' '(' subtypes+=[Entity|EString] ( "," subtypes+=[Entity|EString])* ')' 
		'classificationAtrtibute' classificationAttribute=[Attribute|EString]
	'}';

Categorisation returns Categorisation:
	
	'Categorisation'
	name=EString
	'{'
		'categorisedEntity' categorisedEntity=[EntityConcept|EString]
		'categorisationEntities' categorisationEntities=Categories
		'isPartial' isPartial?=EBoolean 
	'}';

IdentificationDependency returns IdentificationDependency:
	'IdentificationDependency'
	name=EString
	'{'
		'weakEntity' weakEntity=[Entity|EString]
		'regularEntity' regularEntity=RegularEntity
	'}'; 

RegularEntity returns RegularEntity:
	//'RegularEntity'
	//'{'
		/*'entity'*/ entity=[EntityConcept|EString]
		/*'cardinality'*/ '('
		/*'min'*/ min=MinCardinality ',' 
		/*'max'*/ max=MaxCardinality
	')'
		(/*'role'*/ role=EString)?
	/*'}'*/;
 

MinCardinality returns MinCardinality: 
	'zero' | 'one'/* TODO: implement this rule and an appropriate IValueConverter */;

MaxCardinality returns MaxCardinality:
	'one' | 'many' /* TODO: implement this rule and an appropriate IValueConverter */;

Categories returns Categories:
	//'Categories'
	'{'
		'entities' '(' entities+=[EntityConcept|EString] ( "," entities+=[EntityConcept|EString])* ')'
		'('
		/*'min'*/ min=MinCardinality ',' 
		/*'max'*/ max=MaxCardinality
		')' 
	'}';

EBoolean returns ecore::EBoolean:
	'true' | 'false';
	
EInt returns ecore::EInt:
	'-'? INT;