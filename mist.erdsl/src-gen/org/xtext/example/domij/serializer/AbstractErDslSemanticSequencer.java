/*
 * generated by Xtext
 */
package org.xtext.example.domij.serializer;

import com.google.inject.Inject;
import er.Attribute;
import er.AttributeDomain;
import er.Categories;
import er.Categorisation;
import er.Domain;
import er.ERModel;
import er.Entity;
import er.ErPackage;
import er.Gerund;
import er.ISA;
import er.IdentificationDependency;
import er.Key;
import er.RegularEntity;
import er.Relationship;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.domij.services.ErDslGrammarAccess;

@SuppressWarnings("all")
public abstract class AbstractErDslSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private ErDslGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == ErPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case ErPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case ErPackage.ATTRIBUTE_DOMAIN:
				sequence_AttributeDomain(context, (AttributeDomain) semanticObject); 
				return; 
			case ErPackage.CATEGORIES:
				sequence_Categories(context, (Categories) semanticObject); 
				return; 
			case ErPackage.CATEGORISATION:
				sequence_Categorisation(context, (Categorisation) semanticObject); 
				return; 
			case ErPackage.DOMAIN:
				sequence_Domain(context, (Domain) semanticObject); 
				return; 
			case ErPackage.ER_MODEL:
				sequence_ERModel(context, (ERModel) semanticObject); 
				return; 
			case ErPackage.ENTITY:
				sequence_Entity(context, (Entity) semanticObject); 
				return; 
			case ErPackage.GERUND:
				sequence_Gerund(context, (Gerund) semanticObject); 
				return; 
			case ErPackage.ISA:
				sequence_ISA(context, (ISA) semanticObject); 
				return; 
			case ErPackage.IDENTIFICATION_DEPENDENCY:
				sequence_IdentificationDependency(context, (IdentificationDependency) semanticObject); 
				return; 
			case ErPackage.KEY:
				sequence_Key(context, (Key) semanticObject); 
				return; 
			case ErPackage.REGULAR_ENTITY:
				sequence_RegularEntity(context, (RegularEntity) semanticObject); 
				return; 
			case ErPackage.RELATIONSHIP:
				sequence_Relationship(context, (Relationship) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     AttributeDomain returns AttributeDomain
	 *
	 * Constraint:
	 *     (domain=[Domain|EString] length=EInt? default=EString?)
	 */
	protected void sequence_AttributeDomain(ISerializationContext context, AttributeDomain semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=EString attributeDomain=AttributeDomain?)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Categories returns Categories
	 *
	 * Constraint:
	 *     (entities+=[EntityConcept|EString] entities+=[EntityConcept|EString]* min=MinCardinality max=MaxCardinality)
	 */
	protected void sequence_Categories(ISerializationContext context, Categories semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationshipConcept returns Categorisation
	 *     Categorisation returns Categorisation
	 *
	 * Constraint:
	 *     (name=EString categorisedEntity=[EntityConcept|EString] categorisationEntities=Categories isPartial?=EBoolean)
	 */
	protected void sequence_Categorisation(ISerializationContext context, Categorisation semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.MODELLING_CONCEPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.MODELLING_CONCEPT__NAME));
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.CATEGORISATION__CATEGORISED_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.CATEGORISATION__CATEGORISED_ENTITY));
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.CATEGORISATION__CATEGORISATION_ENTITIES) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.CATEGORISATION__CATEGORISATION_ENTITIES));
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.CATEGORISATION__IS_PARTIAL) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.CATEGORISATION__IS_PARTIAL));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getCategorisationAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getCategorisationAccess().getCategorisedEntityEntityConceptEStringParserRuleCall_4_0_1(), semanticObject.getCategorisedEntity());
		feeder.accept(grammarAccess.getCategorisationAccess().getCategorisationEntitiesCategoriesParserRuleCall_6_0(), semanticObject.getCategorisationEntities());
		feeder.accept(grammarAccess.getCategorisationAccess().getIsPartialEBooleanParserRuleCall_8_0(), semanticObject.isIsPartial());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Domain returns Domain
	 *
	 * Constraint:
	 *     (name=EString primitiveDomain=PrimitiveDomain)
	 */
	protected void sequence_Domain(ISerializationContext context, Domain semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.MODELLING_CONCEPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.MODELLING_CONCEPT__NAME));
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.DOMAIN__PRIMITIVE_DOMAIN) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.DOMAIN__PRIMITIVE_DOMAIN));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getDomainAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getDomainAccess().getPrimitiveDomainPrimitiveDomainParserRuleCall_3_0(), semanticObject.getPrimitiveDomain());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ERModel returns ERModel
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         (domains+=Domain domains+=Domain*)? 
	 *         (entities+=Entity entities+=Entity*)? 
	 *         (gerunds+=Gerund gerunds+=Gerund*)? 
	 *         (relationships+=RelationshipConcept relationships+=RelationshipConcept*)?
	 *     )
	 */
	protected void sequence_ERModel(ISerializationContext context, ERModel semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityConcept returns Entity
	 *     Entity returns Entity
	 *
	 * Constraint:
	 *     (name=EString (entityAttributes+=Attribute entityAttributes+=Attribute*)? (keySet+=Key keySet+=Key*)? primaryKey=[Key|EString]?)
	 */
	protected void sequence_Entity(ISerializationContext context, Entity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     EntityConcept returns Gerund
	 *     Gerund returns Gerund
	 *
	 * Constraint:
	 *     relationship=Relationship
	 */
	protected void sequence_Gerund(ISerializationContext context, Gerund semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.GERUND__RELATIONSHIP) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.GERUND__RELATIONSHIP));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getGerundAccess().getRelationshipRelationshipParserRuleCall_0(), semanticObject.getRelationship());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     RelationshipConcept returns ISA
	 *     ISA returns ISA
	 *
	 * Constraint:
	 *     (name=EString supertype=RegularEntity subtypes+=[Entity|EString] subtypes+=[Entity|EString]* classificationAttribute=[Attribute|EString])
	 */
	protected void sequence_ISA(ISerializationContext context, ISA semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationshipConcept returns IdentificationDependency
	 *     IdentificationDependency returns IdentificationDependency
	 *
	 * Constraint:
	 *     (name=EString weakEntity=[Entity|EString] regularEntity=RegularEntity)
	 */
	protected void sequence_IdentificationDependency(ISerializationContext context, IdentificationDependency semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.MODELLING_CONCEPT__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.MODELLING_CONCEPT__NAME));
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.IDENTIFICATION_DEPENDENCY__WEAK_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.IDENTIFICATION_DEPENDENCY__WEAK_ENTITY));
			if (transientValues.isValueTransient(semanticObject, ErPackage.Literals.IDENTIFICATION_DEPENDENCY__REGULAR_ENTITY) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, ErPackage.Literals.IDENTIFICATION_DEPENDENCY__REGULAR_ENTITY));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getIdentificationDependencyAccess().getNameEStringParserRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getIdentificationDependencyAccess().getWeakEntityEntityEStringParserRuleCall_4_0_1(), semanticObject.getWeakEntity());
		feeder.accept(grammarAccess.getIdentificationDependencyAccess().getRegularEntityRegularEntityParserRuleCall_6_0(), semanticObject.getRegularEntity());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Key returns Key
	 *
	 * Constraint:
	 *     (name=EString keyAttributes+=[Attribute|EString] keyAttributes+=[Attribute|EString]*)
	 */
	protected void sequence_Key(ISerializationContext context, Key semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RegularEntity returns RegularEntity
	 *
	 * Constraint:
	 *     (entity=[EntityConcept|EString] min=MinCardinality max=MaxCardinality role=EString?)
	 */
	protected void sequence_RegularEntity(ISerializationContext context, RegularEntity semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     RelationshipConcept returns Relationship
	 *     Relationship returns Relationship
	 *
	 * Constraint:
	 *     (name=EString entities+=RegularEntity entities+=RegularEntity* (relationshipAttributes+=Attribute relationshipAttributes+=Attribute*)?)
	 */
	protected void sequence_Relationship(ISerializationContext context, Relationship semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
