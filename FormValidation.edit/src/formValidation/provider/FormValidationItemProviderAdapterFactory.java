/**
 */
package formValidation.provider;

import formValidation.util.FormValidationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FormValidationItemProviderAdapterFactory extends FormValidationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FormValidationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.ValidationClass} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ValidationClassItemProvider validationClassItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.ValidationClass}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createValidationClassAdapter() {
		if (validationClassItemProvider == null) {
			validationClassItemProvider = new ValidationClassItemProvider(this);
		}

		return validationClassItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.ClassAttribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ClassAttributeItemProvider classAttributeItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.ClassAttribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createClassAttributeAdapter() {
		if (classAttributeItemProvider == null) {
			classAttributeItemProvider = new ClassAttributeItemProvider(this);
		}

		return classAttributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Required} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredItemProvider requiredItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Required}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredAdapter() {
		if (requiredItemProvider == null) {
			requiredItemProvider = new RequiredItemProvider(this);
		}

		return requiredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Email} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmailItemProvider emailItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Email}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmailAdapter() {
		if (emailItemProvider == null) {
			emailItemProvider = new EmailItemProvider(this);
		}

		return emailItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MinLength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinLengthItemProvider minLengthItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MinLength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinLengthAdapter() {
		if (minLengthItemProvider == null) {
			minLengthItemProvider = new MinLengthItemProvider(this);
		}

		return minLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MaxLength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxLengthItemProvider maxLengthItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MaxLength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxLengthAdapter() {
		if (maxLengthItemProvider == null) {
			maxLengthItemProvider = new MaxLengthItemProvider(this);
		}

		return maxLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Length} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LengthItemProvider lengthItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Length}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLengthAdapter() {
		if (lengthItemProvider == null) {
			lengthItemProvider = new LengthItemProvider(this);
		}

		return lengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MinNumber} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinNumberItemProvider minNumberItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MinNumber}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinNumberAdapter() {
		if (minNumberItemProvider == null) {
			minNumberItemProvider = new MinNumberItemProvider(this);
		}

		return minNumberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MinDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinDateItemProvider minDateItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MinDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinDateAdapter() {
		if (minDateItemProvider == null) {
			minDateItemProvider = new MinDateItemProvider(this);
		}

		return minDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MaxNumber} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxNumberItemProvider maxNumberItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MaxNumber}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxNumberAdapter() {
		if (maxNumberItemProvider == null) {
			maxNumberItemProvider = new MaxNumberItemProvider(this);
		}

		return maxNumberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MaxDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxDateItemProvider maxDateItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MaxDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxDateAdapter() {
		if (maxDateItemProvider == null) {
			maxDateItemProvider = new MaxDateItemProvider(this);
		}

		return maxDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AcceptableValuesString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptableValuesStringItemProvider acceptableValuesStringItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AcceptableValuesString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptableValuesStringAdapter() {
		if (acceptableValuesStringItemProvider == null) {
			acceptableValuesStringItemProvider = new AcceptableValuesStringItemProvider(this);
		}

		return acceptableValuesStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AcceptableValuesDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptableValuesDateItemProvider acceptableValuesDateItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AcceptableValuesDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptableValuesDateAdapter() {
		if (acceptableValuesDateItemProvider == null) {
			acceptableValuesDateItemProvider = new AcceptableValuesDateItemProvider(this);
		}

		return acceptableValuesDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.StringPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPatternItemProvider stringPatternItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.StringPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPatternAdapter() {
		if (stringPatternItemProvider == null) {
			stringPatternItemProvider = new StringPatternItemProvider(this);
		}

		return stringPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.DatePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatePatternItemProvider datePatternItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.DatePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatePatternAdapter() {
		if (datePatternItemProvider == null) {
			datePatternItemProvider = new DatePatternItemProvider(this);
		}

		return datePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.NotEquals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotEqualsItemProvider notEqualsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.NotEquals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotEqualsAdapter() {
		if (notEqualsItemProvider == null) {
			notEqualsItemProvider = new NotEqualsItemProvider(this);
		}

		return notEqualsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.GreaterThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterThanItemProvider greaterThanItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.GreaterThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterThanAdapter() {
		if (greaterThanItemProvider == null) {
			greaterThanItemProvider = new GreaterThanItemProvider(this);
		}

		return greaterThanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Equals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualsItemProvider equalsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Equals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualsAdapter() {
		if (equalsItemProvider == null) {
			equalsItemProvider = new EqualsItemProvider(this);
		}

		return equalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.LessThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessThanItemProvider lessThanItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.LessThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessThanAdapter() {
		if (lessThanItemProvider == null) {
			lessThanItemProvider = new LessThanItemProvider(this);
		}

		return lessThanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AttributeArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeArrayItemProvider attributeArrayItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AttributeArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeArrayAdapter() {
		if (attributeArrayItemProvider == null) {
			attributeArrayItemProvider = new AttributeArrayItemProvider(this);
		}

		return attributeArrayItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (validationClassItemProvider != null) validationClassItemProvider.dispose();
		if (classAttributeItemProvider != null) classAttributeItemProvider.dispose();
		if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
		if (requiredItemProvider != null) requiredItemProvider.dispose();
		if (emailItemProvider != null) emailItemProvider.dispose();
		if (minLengthItemProvider != null) minLengthItemProvider.dispose();
		if (maxLengthItemProvider != null) maxLengthItemProvider.dispose();
		if (lengthItemProvider != null) lengthItemProvider.dispose();
		if (minNumberItemProvider != null) minNumberItemProvider.dispose();
		if (minDateItemProvider != null) minDateItemProvider.dispose();
		if (maxNumberItemProvider != null) maxNumberItemProvider.dispose();
		if (maxDateItemProvider != null) maxDateItemProvider.dispose();
		if (acceptableValuesStringItemProvider != null) acceptableValuesStringItemProvider.dispose();
		if (acceptableValuesDateItemProvider != null) acceptableValuesDateItemProvider.dispose();
		if (stringPatternItemProvider != null) stringPatternItemProvider.dispose();
		if (datePatternItemProvider != null) datePatternItemProvider.dispose();
		if (notEqualsItemProvider != null) notEqualsItemProvider.dispose();
		if (greaterThanItemProvider != null) greaterThanItemProvider.dispose();
		if (equalsItemProvider != null) equalsItemProvider.dispose();
		if (lessThanItemProvider != null) lessThanItemProvider.dispose();
		if (attributeArrayItemProvider != null) attributeArrayItemProvider.dispose();
	}

}
