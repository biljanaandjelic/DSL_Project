/**
 */
package formValidation.provider;

import formValidation.util.FormValidationAdapterFactory;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class FormValidationItemProviderAdapterFactory extends FormValidationAdapterFactory implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public FormValidationItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Entity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EntityItemProvider entityItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Entity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEntityAdapter() {
		if (entityItemProvider == null) {
			entityItemProvider = new EntityItemProvider(this);
		}

		return entityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Attribute} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeItemProvider attributeItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Attribute}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeAdapter() {
		if (attributeItemProvider == null) {
			attributeItemProvider = new AttributeItemProvider(this);
		}

		return attributeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AttributeType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeTypeItemProvider attributeTypeItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AttributeType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeTypeAdapter() {
		if (attributeTypeItemProvider == null) {
			attributeTypeItemProvider = new AttributeTypeItemProvider(this);
		}

		return attributeTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Required} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RequiredItemProvider requiredItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Required}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRequiredAdapter() {
		if (requiredItemProvider == null) {
			requiredItemProvider = new RequiredItemProvider(this);
		}

		return requiredItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MinLength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinLengthItemProvider minLengthItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MinLength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinLengthAdapter() {
		if (minLengthItemProvider == null) {
			minLengthItemProvider = new MinLengthItemProvider(this);
		}

		return minLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MaxLength} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxLengthItemProvider maxLengthItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MaxLength}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxLengthAdapter() {
		if (maxLengthItemProvider == null) {
			maxLengthItemProvider = new MaxLengthItemProvider(this);
		}

		return maxLengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Length} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LengthItemProvider lengthItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Length}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLengthAdapter() {
		if (lengthItemProvider == null) {
			lengthItemProvider = new LengthItemProvider(this);
		}

		return lengthItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MinNumber} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinNumberItemProvider minNumberItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MinNumber}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinNumberAdapter() {
		if (minNumberItemProvider == null) {
			minNumberItemProvider = new MinNumberItemProvider(this);
		}

		return minNumberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MinDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MinDateItemProvider minDateItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MinDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMinDateAdapter() {
		if (minDateItemProvider == null) {
			minDateItemProvider = new MinDateItemProvider(this);
		}

		return minDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MaxNumber} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxNumberItemProvider maxNumberItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MaxNumber}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxNumberAdapter() {
		if (maxNumberItemProvider == null) {
			maxNumberItemProvider = new MaxNumberItemProvider(this);
		}

		return maxNumberItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.MaxDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected MaxDateItemProvider maxDateItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.MaxDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createMaxDateAdapter() {
		if (maxDateItemProvider == null) {
			maxDateItemProvider = new MaxDateItemProvider(this);
		}

		return maxDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AcceptableValuesString} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptableValuesStringItemProvider acceptableValuesStringItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AcceptableValuesString}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptableValuesStringAdapter() {
		if (acceptableValuesStringItemProvider == null) {
			acceptableValuesStringItemProvider = new AcceptableValuesStringItemProvider(this);
		}

		return acceptableValuesStringItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AcceptableValuesDate} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AcceptableValuesDateItemProvider acceptableValuesDateItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AcceptableValuesDate}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAcceptableValuesDateAdapter() {
		if (acceptableValuesDateItemProvider == null) {
			acceptableValuesDateItemProvider = new AcceptableValuesDateItemProvider(this);
		}

		return acceptableValuesDateItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.StringPattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected StringPatternItemProvider stringPatternItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.StringPattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createStringPatternAdapter() {
		if (stringPatternItemProvider == null) {
			stringPatternItemProvider = new StringPatternItemProvider(this);
		}

		return stringPatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.DatePattern} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DatePatternItemProvider datePatternItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.DatePattern}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDatePatternAdapter() {
		if (datePatternItemProvider == null) {
			datePatternItemProvider = new DatePatternItemProvider(this);
		}

		return datePatternItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.NotEquals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NotEqualsItemProvider notEqualsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.NotEquals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNotEqualsAdapter() {
		if (notEqualsItemProvider == null) {
			notEqualsItemProvider = new NotEqualsItemProvider(this);
		}

		return notEqualsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.GreaterThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected GreaterThanItemProvider greaterThanItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.GreaterThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createGreaterThanAdapter() {
		if (greaterThanItemProvider == null) {
			greaterThanItemProvider = new GreaterThanItemProvider(this);
		}

		return greaterThanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Equals} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EqualsItemProvider equalsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Equals}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEqualsAdapter() {
		if (equalsItemProvider == null) {
			equalsItemProvider = new EqualsItemProvider(this);
		}

		return equalsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.LessThan} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LessThanItemProvider lessThanItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.LessThan}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLessThanAdapter() {
		if (lessThanItemProvider == null) {
			lessThanItemProvider = new LessThanItemProvider(this);
		}

		return lessThanItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AttributeArray} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeArrayItemProvider attributeArrayItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AttributeArray}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeArrayAdapter() {
		if (attributeArrayItemProvider == null) {
			attributeArrayItemProvider = new AttributeArrayItemProvider(this);
		}

		return attributeArrayItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.NumericUIComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NumericUIComponentItemProvider numericUIComponentItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.NumericUIComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNumericUIComponentAdapter() {
		if (numericUIComponentItemProvider == null) {
			numericUIComponentItemProvider = new NumericUIComponentItemProvider(this);
		}

		return numericUIComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.RadioButton} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RadioButtonItemProvider radioButtonItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.RadioButton}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRadioButtonAdapter() {
		if (radioButtonItemProvider == null) {
			radioButtonItemProvider = new RadioButtonItemProvider(this);
		}

		return radioButtonItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.DropDownList} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DropDownListItemProvider dropDownListItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.DropDownList}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDropDownListAdapter() {
		if (dropDownListItemProvider == null) {
			dropDownListItemProvider = new DropDownListItemProvider(this);
		}

		return dropDownListItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.CheckBox} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CheckBoxItemProvider checkBoxItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.CheckBox}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCheckBoxAdapter() {
		if (checkBoxItemProvider == null) {
			checkBoxItemProvider = new CheckBoxItemProvider(this);
		}

		return checkBoxItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.DateUIComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DateUIComponentItemProvider dateUIComponentItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.DateUIComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDateUIComponentAdapter() {
		if (dateUIComponentItemProvider == null) {
			dateUIComponentItemProvider = new DateUIComponentItemProvider(this);
		}

		return dateUIComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.TextInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextInputItemProvider textInputItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.TextInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextInputAdapter() {
		if (textInputItemProvider == null) {
			textInputItemProvider = new TextInputItemProvider(this);
		}

		return textInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.TextArea} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TextAreaItemProvider textAreaItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.TextArea}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTextAreaAdapter() {
		if (textAreaItemProvider == null) {
			textAreaItemProvider = new TextAreaItemProvider(this);
		}

		return textAreaItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AttributeSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AttributeSettingsItemProvider attributeSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AttributeSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAttributeSettingsAdapter() {
		if (attributeSettingsItemProvider == null) {
			attributeSettingsItemProvider = new AttributeSettingsItemProvider(this);
		}

		return attributeSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.LabelSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LabelSettingsItemProvider labelSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.LabelSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLabelSettingsAdapter() {
		if (labelSettingsItemProvider == null) {
			labelSettingsItemProvider = new LabelSettingsItemProvider(this);
		}

		return labelSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.ErrorMessage} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorMessageItemProvider errorMessageItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.ErrorMessage}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorMessageAdapter() {
		if (errorMessageItemProvider == null) {
			errorMessageItemProvider = new ErrorMessageItemProvider(this);
		}

		return errorMessageItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.TelInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TelInputItemProvider telInputItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.TelInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTelInputAdapter() {
		if (telInputItemProvider == null) {
			telInputItemProvider = new TelInputItemProvider(this);
		}

		return telInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.EmailInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected EmailInputItemProvider emailInputItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.EmailInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createEmailInputAdapter() {
		if (emailInputItemProvider == null) {
			emailInputItemProvider = new EmailInputItemProvider(this);
		}

		return emailInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Password} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PasswordItemProvider passwordItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Password}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPasswordAdapter() {
		if (passwordItemProvider == null) {
			passwordItemProvider = new PasswordItemProvider(this);
		}

		return passwordItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.FileInput} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected FileInputItemProvider fileInputItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.FileInput}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createFileInputAdapter() {
		if (fileInputItemProvider == null) {
			fileInputItemProvider = new FileInputItemProvider(this);
		}

		return fileInputItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.PrimitiveDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PrimitiveDataTypeItemProvider primitiveDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.PrimitiveDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPrimitiveDataTypeAdapter() {
		if (primitiveDataTypeItemProvider == null) {
			primitiveDataTypeItemProvider = new PrimitiveDataTypeItemProvider(this);
		}

		return primitiveDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.NonPrimitiveDataType} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NonPrimitiveDataTypeItemProvider nonPrimitiveDataTypeItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.NonPrimitiveDataType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNonPrimitiveDataTypeAdapter() {
		if (nonPrimitiveDataTypeItemProvider == null) {
			nonPrimitiveDataTypeItemProvider = new NonPrimitiveDataTypeItemProvider(this);
		}

		return nonPrimitiveDataTypeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.RefEntity} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected RefEntityItemProvider refEntityItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.RefEntity}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createRefEntityAdapter() {
		if (refEntityItemProvider == null) {
			refEntityItemProvider = new RefEntityItemProvider(this);
		}

		return refEntityItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.BusinessModel} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected BusinessModelItemProvider businessModelItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.BusinessModel}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createBusinessModelAdapter() {
		if (businessModelItemProvider == null) {
			businessModelItemProvider = new BusinessModelItemProvider(this);
		}

		return businessModelItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.ErrorMessageSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ErrorMessageSettingsItemProvider errorMessageSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.ErrorMessageSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createErrorMessageSettingsAdapter() {
		if (errorMessageSettingsItemProvider == null) {
			errorMessageSettingsItemProvider = new ErrorMessageSettingsItemProvider(this);
		}

		return errorMessageSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Pagination} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected PaginationItemProvider paginationItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Pagination}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createPaginationAdapter() {
		if (paginationItemProvider == null) {
			paginationItemProvider = new PaginationItemProvider(this);
		}

		return paginationItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.TableOverview} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected TableOverviewItemProvider tableOverviewItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.TableOverview}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createTableOverviewAdapter() {
		if (tableOverviewItemProvider == null) {
			tableOverviewItemProvider = new TableOverviewItemProvider(this);
		}

		return tableOverviewItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.OverviewSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected OverviewSettingsItemProvider overviewSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.OverviewSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createOverviewSettingsAdapter() {
		if (overviewSettingsItemProvider == null) {
			overviewSettingsItemProvider = new OverviewSettingsItemProvider(this);
		}

		return overviewSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.NoteSettings} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NoteSettingsItemProvider noteSettingsItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.NoteSettings}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNoteSettingsAdapter() {
		if (noteSettingsItemProvider == null) {
			noteSettingsItemProvider = new NoteSettingsItemProvider(this);
		}

		return noteSettingsItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.LoadValues} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected LoadValuesItemProvider loadValuesItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.LoadValues}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createLoadValuesAdapter() {
		if (loadValuesItemProvider == null) {
			loadValuesItemProvider = new LoadValuesItemProvider(this);
		}

		return loadValuesItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.AutocompleteComponent} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected AutocompleteComponentItemProvider autocompleteComponentItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.AutocompleteComponent}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createAutocompleteComponentAdapter() {
		if (autocompleteComponentItemProvider == null) {
			autocompleteComponentItemProvider = new AutocompleteComponentItemProvider(this);
		}

		return autocompleteComponentItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link formValidation.Color} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ColorItemProvider colorItemProvider;

	/**
	 * This creates an adapter for a {@link formValidation.Color}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createColorAdapter() {
		if (colorItemProvider == null) {
			colorItemProvider = new ColorItemProvider(this);
		}

		return colorItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>)type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (entityItemProvider != null) entityItemProvider.dispose();
		if (attributeItemProvider != null) attributeItemProvider.dispose();
		if (attributeTypeItemProvider != null) attributeTypeItemProvider.dispose();
		if (requiredItemProvider != null) requiredItemProvider.dispose();
		if (minLengthItemProvider != null) minLengthItemProvider.dispose();
		if (maxLengthItemProvider != null) maxLengthItemProvider.dispose();
		if (lengthItemProvider != null) lengthItemProvider.dispose();
		if (minNumberItemProvider != null) minNumberItemProvider.dispose();
		if (minDateItemProvider != null) minDateItemProvider.dispose();
		if (maxNumberItemProvider != null) maxNumberItemProvider.dispose();
		if (maxDateItemProvider != null) maxDateItemProvider.dispose();
		if (acceptableValuesStringItemProvider != null) acceptableValuesStringItemProvider.dispose();
		if (acceptableValuesDateItemProvider != null) acceptableValuesDateItemProvider.dispose();
		if (stringPatternItemProvider != null) stringPatternItemProvider.dispose();
		if (datePatternItemProvider != null) datePatternItemProvider.dispose();
		if (notEqualsItemProvider != null) notEqualsItemProvider.dispose();
		if (greaterThanItemProvider != null) greaterThanItemProvider.dispose();
		if (equalsItemProvider != null) equalsItemProvider.dispose();
		if (lessThanItemProvider != null) lessThanItemProvider.dispose();
		if (attributeArrayItemProvider != null) attributeArrayItemProvider.dispose();
		if (numericUIComponentItemProvider != null) numericUIComponentItemProvider.dispose();
		if (radioButtonItemProvider != null) radioButtonItemProvider.dispose();
		if (dropDownListItemProvider != null) dropDownListItemProvider.dispose();
		if (checkBoxItemProvider != null) checkBoxItemProvider.dispose();
		if (dateUIComponentItemProvider != null) dateUIComponentItemProvider.dispose();
		if (textInputItemProvider != null) textInputItemProvider.dispose();
		if (textAreaItemProvider != null) textAreaItemProvider.dispose();
		if (attributeSettingsItemProvider != null) attributeSettingsItemProvider.dispose();
		if (labelSettingsItemProvider != null) labelSettingsItemProvider.dispose();
		if (errorMessageItemProvider != null) errorMessageItemProvider.dispose();
		if (telInputItemProvider != null) telInputItemProvider.dispose();
		if (emailInputItemProvider != null) emailInputItemProvider.dispose();
		if (passwordItemProvider != null) passwordItemProvider.dispose();
		if (fileInputItemProvider != null) fileInputItemProvider.dispose();
		if (primitiveDataTypeItemProvider != null) primitiveDataTypeItemProvider.dispose();
		if (nonPrimitiveDataTypeItemProvider != null) nonPrimitiveDataTypeItemProvider.dispose();
		if (refEntityItemProvider != null) refEntityItemProvider.dispose();
		if (businessModelItemProvider != null) businessModelItemProvider.dispose();
		if (errorMessageSettingsItemProvider != null) errorMessageSettingsItemProvider.dispose();
		if (paginationItemProvider != null) paginationItemProvider.dispose();
		if (tableOverviewItemProvider != null) tableOverviewItemProvider.dispose();
		if (overviewSettingsItemProvider != null) overviewSettingsItemProvider.dispose();
		if (noteSettingsItemProvider != null) noteSettingsItemProvider.dispose();
		if (loadValuesItemProvider != null) loadValuesItemProvider.dispose();
		if (autocompleteComponentItemProvider != null) autocompleteComponentItemProvider.dispose();
		if (colorItemProvider != null) colorItemProvider.dispose();
	}

}
