// automatically generated by Xtext
grammar org.xtext.example.mydsl.FormValidationDsl with org.eclipse.xtext.common.Terminals

import "http://www.example.org/formValidation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

ValidationClass returns ValidationClass:
	{ValidationClass}
	//'ValidationClass'
	name=EString
	'{'
		(/*'classattribute'*/ /*'{'*/ classattribute+=ClassAttribute ( /*","*/ classattribute+=ClassAttribute)* /*'}'*/ )?
		(/*'classrule' '{'*/ classrule+=ClassRule (/* ","*/  classrule+=ClassRule)* /*'}'*/ )?
	'}';


ClassRule returns ClassRule:
	NotEquals | GreaterThan | Equals | LessThan;


AttributeRule returns AttributeRule:
	Required | Email | MinLength | MaxLength | Length | MinNumber | MinDate | MaxNumber | MaxDate | AcceptableValuesString | AcceptableValuesDate | StringPattern | DatePattern;


EString returns ecore::EString:
	STRING | ID;

ClassAttribute returns ClassAttribute:
	//'ClassAttribute'
	name=EString
	'{'
		'type' attributetype=AttributeType
		(/*'rule'*/ /*'{'*/ attributerule+=AttributeRule ( /*","*/ attributerule+=AttributeRule)* /*'}'*/ )?
	'}';

AttributeType returns AttributeType:
	{AttributeType}
	//'AttributeType'
	//'{'
		(/*'vrsta'*/ vrsta=EVrsta)/* ?*/
	/*'}'*/;

enum EVrsta returns EVrsta:
				String = 'String' | Number = 'Number' | Date = 'Date';

Required returns Required:
	{Required}
	(isRequired?='isRequired')?
	'Required'
	;

Email returns Email:
	{Email}
	(isEmail?='isEmail')?
	'Email'
	;

MinLength returns MinLength:
	{MinLength}
	'MinLength'
	/*'{'*/
		(/*'value'*/ value=Int0)?
	/*'}'*/;

MaxLength returns MaxLength:
	{MaxLength}
	'MaxLength'
	/*'{'*/
		(/*'value'*/ value=Int0)?
	/*'}'*/;

Length returns Length:
	{Length}
	'Length'
	/*'{'*/
		(/*'value'*/ value=Int0)?
	/*'}'*/;

MinNumber returns MinNumber:
	{MinNumber}
	'MinNumber'
	/*'{'*/
		(/*'value'*/ value=Float)?
	/*'}'*/;

MinDate returns MinDate:
	{MinDate}
	'MinDate'
	/*'{'*/
		(/*'value'*/ value=EString)?
	/*'}'*/;

MaxNumber returns MaxNumber:
	{MaxNumber}
	'MaxNumber'
	/*'{'*/
		(/*'value'*/ value=Float)?
	/*'}'*/;

MaxDate returns MaxDate:
	{MaxDate}
	'MaxDate'
	/*'{'*/
		(/*'value'*/ value=EString)?
	/*'}'*/;

AcceptableValuesString returns AcceptableValuesString:
	{AcceptableValuesString}
	'AcceptableValuesString'
	/*'{'*/
		(/*'values'*/ '{' values+=EString ( "," values+=EString)* '}' )?
	/*'}'*/;

AcceptableValuesDate returns AcceptableValuesDate:
	{AcceptableValuesDate}
	'AcceptableValuesDate'
	/*'{'*/
		(/*'values'*/ '{' values+=EString ( "," values+=EString)* '}' )?
	/*'}'*/;

StringPattern returns StringPattern:
	{StringPattern}
	'StringPattern'
	/*'{'*/
		(/*'value'*/ value=EString)?
	/*'}'*/;

DatePattern returns DatePattern:
	{DatePattern}
	'DatePattern'
	/*'{'*/
		(/*'value'*/ value=EString)?
	/*'}'*/;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

Int0 returns type::Int:
	/*'Int'*/ INT /* TODO: implement this rule and an appropriate IValueConverter */;

Float returns type::Float:
	/*'Float'*/ INT'.'INT | INT /* TODO: implement this rule and an appropriate IValueConverter */;

EDate returns ecore::EDate:
	'EDate' /* TODO: implement this rule and an appropriate IValueConverter */;

NotEquals returns NotEquals:
	{NotEquals}
	'NotEquals'
	'{'
		('attributearray' attributearray=AttributeArray)?
	'}';

GreaterThan returns GreaterThan:
	{GreaterThan}
	'GreaterThan'
	'{'
		('classattribute' classattribute=[ClassAttribute|EString])?
		('attributearray' /*'{' */ attributearray+=AttributeArray ( "," attributearray+=AttributeArray)* /*'}'*/ )?
	'}';

Equals returns Equals:
	{Equals}
	'Equals'
	'{'
		('attributearray' attributearray=AttributeArray)?
	'}';

LessThan returns LessThan:
	{LessThan}
	'LessThan'
	'{'
		('classattribute' classattribute=[ClassAttribute|EString])?
		('attributearray' '{' attributearray+=AttributeArray ( "," attributearray+=AttributeArray)* '}' )?
	'}';

AttributeArray returns AttributeArray:
	{AttributeArray}
	//'AttributeArray'
	/*'{'*/
		(/*'classattribute'*/ '('  classattribute+=[ClassAttribute|EString] ( "," classattribute+=[ClassAttribute|EString])* ')' )?
	/*'}'*/;
