// automatically generated by Xtext
grammar org.xtext.example.mydsl.FormValDSL with org.eclipse.xtext.common.Terminals

import "http://www.example.org/formValidation" 
import "http://www.eclipse.org/emf/2002/Ecore" as ecore
import "http://www.eclipse.org/emf/2003/XMLType" as type

BusinessModel returns BusinessModel:
	{BusinessModel} 
	/*'BusinessModel'*/
	/*'{'*/
		(/*'validationclasses' '{'*/ validationclasses+=ValidationClass ( /*","*/ validationclasses+=ValidationClass)* /*'}'*/ )?
	/*'}'*/;



ClassRule returns ClassRule:
	NotEquals | GreaterThan | Equals | LessThan;

FormLayout returns FormLayout:
	FieldSet | Tab | Grid;

AdditionalSettings returns AdditionalSettings:
	AttributeSettings | LabelSettings | ErrorMessageSettings | FormSettings | NoteSettings;



AttributeRule returns AttributeRule:
	Required | MinLength | MaxLength | Length | MinNumber | MinDate | MaxNumber | MaxDate | AcceptableValuesString | AcceptableValuesDate | StringPattern | DatePattern;


UIComponent returns UIComponent:
	NumericUIComponent | RadioButton | DropDownList | CheckBox | DateUIComponent | TextInput | TextArea | TelInput | EmailInput | Password | FileInput | RefEntity | LoadValues | AutocompleteComponent;

AttributeDataType returns AttributeDataType:
	PrimitiveDataType | NonPrimitiveDataType;


ValidationClass returns ValidationClass:
	{ValidationClass}
	/*'ValidationClass'*/
	name=EString
	'{'
		('label' label=EString)?
		(/*'classattribute' '{'*/ classattribute+=ClassAttribute ( /*","*/ classattribute+=ClassAttribute)* /*'}'*/ )?
		(/*'classrule' '{'*/ classrule+=ClassRule ( /*","*/ classrule+=ClassRule)* /*'}'*/ )?
		(/*'formlayout' '{'*/ formlayout+=FormLayout ( /*","*/ formlayout+=FormLayout)* /*'}'*/ )?
		(/*'additionalSettings' '{'*/ additionalSettings+=AdditionalSettings ( /*","*/ additionalSettings+=AdditionalSettings)* /*'}'*/ )?
		/*attributetype=AttributeType*/
		/*('overviewsettings' overviewsettings=OverviewSettings)?*/
		(/*'overviewsettings'*/ overviewsettings=OverviewSettings)?
		/*('overviewsettings' '{' overviewsettings+=OverviewSettings ( "," overviewsettings+=OverviewSettings) '}' )?*/
	'}';

EString returns ecore::EString:
	STRING | ID;

ClassAttribute returns ClassAttribute:
	
	/*'ClassAttribute'*/
	name=EString
	'{'
		
		('Label' label=EString)?
		/*('master' master=EBoolean)?*/
		
		/*(isClassRepresenting?='isClassRepresenting')?*/
		/*'attributetype'*/ attributetype=AttributeType
		(master?='Master')?
		(isClassRepresenting?='ClassRepresenting')?
		(/*'Attribute rules' '{'*/ attributerule+=AttributeRule ( /*","*/ attributerule+=AttributeRule)* /*'}'*/ )?
	'}';

OverviewSettings returns OverviewSettings:
	{OverviewSettings}
	'OverviewSettings'
	'{'
		(/*'tableoverview'*/ tableoverview=TableOverview)?
		/*('tableoverview' tableoverview=TableOverview)?*/
		/*('tableoverview' '{' tableoverview+=TableOverview ( "," tableoverview+=TableOverview)* '}')? */
	'}';

AttributeType returns AttributeType:
	/*'AttributeType'*/
	/*'{'*/
		'Data type' attributeDataType=AttributeDataType
		(/*'UI component'*/ uiComponent=UIComponent)?
	/*'}'*/;

EBoolean returns ecore::EBoolean:
	'true' | 'false';

NumericUIComponent returns NumericUIComponent:
	{NumericUIComponent}
	'NumericUIComponent'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Default value' defaultValue=EDouble)?
		('Component type' componentType=EUINumberComponentType)?
	'}';

RadioButton returns RadioButton:
	{RadioButton}
	'RadioButton'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Orientation' orientation=EOrientation)?
	'}';

DropDownList returns DropDownList:
	{DropDownList}
	(isMultiSelect?='MultiSelectable')?
	'DropDownList'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
	'}';

CheckBox returns CheckBox:
	{CheckBox}
	'CheckBox'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Orientation' orientation=EOrientation)?
	'}';

DateUIComponent returns DateUIComponent:
	{DateUIComponent}
	'DateUIComponent'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Type' type=EDateUIType)?
	'}';

TextInput returns TextInput:
	{TextInput}
	'TextInput'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Place holder' placeHolder=EString)?
	'}';

TextArea returns TextArea:
	{TextArea}
	'TextArea'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Place holder' placeHolder=EString)?
		('Number of rows' numOfRows=EInt)?
	'}';

TelInput returns TelInput:
	{TelInput}
	'TelInput'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Place holder' placeHolder=EString)?
	'}';

EmailInput returns EmailInput:
	{EmailInput}
	'EmailInput'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Place holder' placeHolder=EString)?
	'}';

Password returns Password:
	{Password}
	'Password'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Place holder' placeHolder=EString)?
		('Visible' visible=EBoolean)?
	'}';

FileInput returns FileInput:
	{FileInput}
	'FileInput'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
		('Button position' buttonPosition=EPosition)?
	'}';

RefEntity returns RefEntity:
	{RefEntity}
	'RefEntity'
	'{'
		('tooltip' tooltip=EString)?
		('note' note=EString)?
		('isSingeValue' isSingeValue=EBoolean)?
	'}';

LoadValues returns LoadValues:
	{LoadValues}
	(isMultiSelect?='isMultiSelect')?
	'LoadValues'
	'{'
		('tooltip' tooltip=EString)?
		('note' note=EString)?
	'}';

AutocompleteComponent returns AutocompleteComponent:
	{AutocompleteComponent}
	'AutocompleteComponent'
	'{'
		('Tooltip' tooltip=EString)?
		('Note' note=EString)?
	'}';

EDouble returns ecore::EDouble:
	'-'? INT? '.' INT (('E'|'e') '-'? INT)?;

enum EUINumberComponentType returns EUINumberComponentType:
				NumberScroller = 'NumberScroller' | SimpleInput = 'SimpleInput';

enum EOrientation returns EOrientation:
				Vertical = 'Vertical' | Horizontal = 'Horizontal';

enum EDateUIType returns EDateUIType:
				OnlyDate = 'OnlyDate' | OnlyTime = 'OnlyTime' | DateTime = 'DateTime';

EInt returns ecore::EInt:
	'-'? INT;

enum EPosition returns EPosition:
				Above = 'Above' | Left = 'Left' | Right = 'Right' | Below = 'Below';

PrimitiveDataType returns PrimitiveDataType:
	{PrimitiveDataType}
	
	/*'PrimitiveDataType'
	'{'*/
		(/*'type'*/ type=EDataType)?
		(isCollection?='Collection')?
	/*'}'*/;

NonPrimitiveDataType returns NonPrimitiveDataType:
	
	
	/*'{'
		'type'*/ type=[ValidationClass|EString]
		(isCollection?='Collection')?
	/*'}'*/;

enum EDataType returns EDataType:
				String = 'String' | Number = 'Number' | Date = 'Date' | Blob = 'Blob';

ErrorMessage returns ErrorMessage:
	{ErrorMessage}
	 
	'{'
		('Error message' message=EString)?
	'}';

Required returns Required:
	{Required}
	'Required'
	/*'{'*/
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	/*'}'*/;

MinLength returns MinLength:
	{MinLength}
	'MinLength'
	/*'{'*/
		(/*'value'*/ value=EInt)?
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	/*'}'*/;

MaxLength returns MaxLength:
	{MaxLength}
	'MaxLength'
	/*'{'*/
		(/*'value'*/ value=EInt)?
		(/*'attributeRuleErrorMessage'*/ attributeRuleErrorMessage=ErrorMessage)?
	/*'}'*/;

Length returns Length:
	{Length}
	'Length'
	
		(/*'value'*/ value=Int0)?
		(/*'attributeRuleErrorMessage'*/ attributeRuleErrorMessage=ErrorMessage)?
	;

MinNumber returns MinNumber:
	{MinNumber}
	'MinNumber'
	/*'{'*/
		(/*'value'*/ value=Float)?
		(/*'attributeRuleErrorMessage'*/ attributeRuleErrorMessage=ErrorMessage)?
	/*'}'*/;

MinDate returns MinDate:
	{MinDate}
	'MinDate'
	/*'{'*/
		(/*'value'*/ value=EString)?
		(/*'attributeRuleErrorMessage'*/ attributeRuleErrorMessage=ErrorMessage)?
	/*'}'*/;

MaxNumber returns MaxNumber:
	{MaxNumber}
	'MaxNumber'
	'{'
		('value' value=Float)?
		(/*'attributeRuleErrorMessage'*/ attributeRuleErrorMessage=ErrorMessage)?
	'}';

MaxDate returns MaxDate:
	{MaxDate}
	'MaxDate'
	'{'
		('value' value=EString)?
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	'}';

AcceptableValuesString returns AcceptableValuesString:
	{AcceptableValuesString}
	'AcceptableValuesString'
	'{'
		('values' '{' values+=EString ( "," values+=EString)* '}' )?
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	'}';

AcceptableValuesDate returns AcceptableValuesDate:
	{AcceptableValuesDate}
	'AcceptableValuesDate'
	'{'
		('values' '{' values+=EString ( "," values+=EString)* '}' )?
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	'}';

StringPattern returns StringPattern:
	{StringPattern}
	'StringPattern'
	/*'{'*/
		(/*'value'*/ value=EString)?
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	/*'}'*/;

DatePattern returns DatePattern:
	{DatePattern}
	'DatePattern'
	'{'
		('value' value=EString)?
		(/*'Error message'*/ attributeRuleErrorMessage=ErrorMessage)?
	'}';

Int0 returns type::Int:
	'Int' /* TODO: implement this rule and an appropriate IValueConverter */;

Float returns type::Float:
	'Float' /* TODO: implement this rule and an appropriate IValueConverter */;

NotEquals returns NotEquals:
	{NotEquals}
	'NotEquals'
	'{'
		('Error message' classRuleErrorMessage=ErrorMessage)?
		(/*'attributearray'*/ attributearray=AttributeArray)?
	'}';

GreaterThan returns GreaterThan:
	{GreaterThan}
	'GreaterThan'
	'{'
		(/*'classattribute'*/ classattribute=[ClassAttribute|EString])?
		(/*'Error message'*/ classRuleErrorMessage=ErrorMessage)?
		(/*'attributearray'*/ '{' attributearray+=AttributeArray ( /*","*/ attributearray+=AttributeArray)* '}' )?
	'}';

Equals returns Equals:
	{Equals}
	'Equals'
	'{'
		('Error message' classRuleErrorMessage=ErrorMessage)?
		(/*'attributearray'*/ attributearray=AttributeArray)?
	'}';

LessThan returns LessThan:
	{LessThan}
	'LessThan'
	'{'
		(/*'classattribute'*/ classattribute=[ClassAttribute|EString])?
		(/*'Error message'*/ classRuleErrorMessage=ErrorMessage)?
		(/*'attributearray'*/ '{' attributearray+=AttributeArray ( "," attributearray+=AttributeArray)* '}' )?
	'}';

AttributeArray returns AttributeArray:
	{AttributeArray}
	/*'AttributeArray'*/
	'{'
		('attributes' '(' attributes+=[ClassAttribute|EString] ( "," attributes+=[ClassAttribute|EString])* ')' )?
	'}';

FieldSet returns FieldSet:
	{FieldSet}
	'FieldSet'
	name=EString
	'{'
		('Legend' legend=EString)?
		(/*'attributearray'*/ attributearray=AttributeArray)?
		(/*'layouts'*/ /*'{'*/ layouts+=FormLayout ( /*","*/ layouts+=FormLayout)* /*'}'*/ )?
	'}';

Tab returns Tab:
	{Tab}
	'Tab'
	name=EString
	'{'
		('Label' label=EString)?
		(/*'attributearray'*/ attributearray=AttributeArray)?
		(/*'layouts'*/ '{' layouts+=FormLayout ( "," layouts+=FormLayout)* '}' )?
	'}';

Grid returns Grid:
	{Grid}
	'Grid'
	name=EString
	'{'
		('Number of columns' numOfColumns=EInt)?
		('Number of rows' numOfRows=EInt)?
		('Order' order=EGridOrder)?
		/*('ExpandLast' expandLast=EBoolean)?*/
		(expandLast?='Expand last')?
		(/*'attributearray'*/ attributearray=AttributeArray)?
		(/*'layouts' '{'*/ layouts+=FormLayout (/*"," */  layouts+=FormLayout)* /*'}'*/ )?
	'}';

enum EGridOrder returns EGridOrder:
				FirstRow = 'FirstRow' | FirstColumn = 'FirstColumn';

AttributeSettings returns AttributeSettings:
	{AttributeSettings}
	'AttributeSettings'
	'{'
		('Presentation' presentation=ERequiredField)?
	'}';

LabelSettings returns LabelSettings:
	{LabelSettings}
	'LabelSettings'
	'{'
		('Position' position=EPosition)?
	'}';

ErrorMessageSettings returns ErrorMessageSettings:
	{ErrorMessageSettings}
	'ErrorMessageSettings'
	'{'
		('Position' position=EPosition)?
		('Color' color=Color)?
	'}';

FormSettings returns FormSettings:
	{FormSettings}
	(autoComplete?='Auto Complete')?
	'FormSettings'
	;

NoteSettings returns NoteSettings:
	{NoteSettings}
	'NoteSettings'
	'{'
		('Position' position=EPosition)?
	'}';

enum ERequiredField returns ERequiredField:
				Asterix = 'Asterix' | Highlighting = 'Highlighting';

Color returns Color:
	{Color}
	/*'Color'*/
	/*'{'*/
	'('
		(/*'red'*/ red=EInt ',')?
		(/*'green'*/ green=EInt ',')?
		(/*'blue'*/ blue=EInt)?
	')'
	/*'}'*/;

TableOverview returns TableOverview:
	{TableOverview}
	'TableOverview'
	name=EString
	'{'
		('Height' height=EInt)?
		('Width' width=EInt)?
		('Title' title=EString)?
		(/*'paging'*/ paging=Pagination)?
		/*('Paging' '{' paging+=Pagination ( "," paging+=Pagination) '}' paging=Pagination )? */
	'}';

Pagination returns Pagination:
	{Pagination}
	'Pagination'
	'{'
		('Possible number of shown rows' '{' possibleNumberOfShownRows+=EInt ( "," possibleNumberOfShownRows+=EInt)* '}' )?
		('Default number of shown rows' defaultNumOfShownRows=EInt)?
	'}';
